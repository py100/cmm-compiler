../grammer/grammer2.txt
instr = {[terminal]}
terminal
instr = {BREAK}
instr = {CHAR}
instr = {CONTINUE}
instr = {DOUBLE}
instr = {ELSE}
instr = {FLOAT}
instr = {FOR}
instr = {IF}
instr = {INT}
instr = {LONG}
instr = {RETURN}
instr = {SHORT}
instr = {SIGNED}
instr = {TYPEDEF}
instr = {UNSIGNED}
instr = {VOID}
instr = {WHILE}
instr = {INCLUDE}
instr = {IDENTIFIER}
instr = {INT_VAL}
instr = {CHAR_VAL}
instr = {FLOAT_VAL}
instr = {STRING_VAL}
instr = {*}
instr = {/}
instr = {%}
instr = {+}
instr = {-}
instr = {<}
instr = {>}
instr = {=}
instr = {++}
instr = {--}
instr = {<=}
instr = {>=}
instr = {!=}
instr = {&&}
instr = {||}
instr = {==}
instr = {!}
instr = {OP_OTHERS}
instr = {CONST_STR}
instr = {(}
instr = {)}
instr = {[}
instr = {]}
instr = {{}
instr = {}}
instr = {'}
instr = {"}
instr = {:}
instr = {;}
instr = {,}
instr = {#}
instr = {[nonterminal]}
nonterminal
instr = {program'}
instr = {program}
instr = {main_declaration}
instr = {type_specifier}
instr = {compound_statement}
instr = {declaration_list}
instr = {declaration}
instr = {initializer}
instr = {declaration_type}
instr = {init_declarator_list}
instr = {init_declarator}
instr = {declarator}
instr = {statement_list}
instr = {statement}
instr = {expression_statement}
instr = {expression}
instr = {assignment_expression}
instr = {condition_expression}
instr = {unary_expression}
instr = {logical_or_expression}
instr = {logical_and_expression}
instr = {inclusive_or_expression}
instr = {exclusive_or_expression}
instr = {and_expression}
instr = {equality_expression}
instr = {relational_expression}
instr = {additive_expression}
instr = {multiplicative_expression}
instr = {postfix_expression}
instr = {primary_expression}
instr = {iteration_statement}
instr = {jump_statement}
instr = {selection_statement}
instr = {[start]}
start
instr = {program'}
instr = {[production]}
production
instr = {program'}
instr = {program}
instr = {main_declaration}
instr = {type_specifier}
instr = {compound_statement}
instr = {declaration_list}
instr = {declaration_type}
instr = {init_declarator_list}
instr = {init_declarator}
instr = {declarator}
instr = {initializer}
instr = {statement_list}
instr = {statement}
instr = {expression_statement}
instr = {expression}
instr = {assignment_expression}
instr = {logical_or_expression}
instr = {logical_and_expression}
instr = {equality_expression}
instr = {relational_expression}
instr = {additive_expression}
instr = {multiplicative_expression}
instr = {unary_expression}
instr = {iteration_statement}
instr = {jump_statement}
instr = {selection_statement}
[0]program' -> program 
[1]program -> main_declaration 
[2]main_declaration -> type_specifier IDENTIFIER ( ) compound_statement 
[3]type_specifier -> VOID 
[4]type_specifier -> CHAR 
[5]type_specifier -> INT 
[6]type_specifier -> FLOAT 
[7]compound_statement -> { } 
[8]compound_statement -> { declaration_list } 
[9]compound_statement -> { statement_list } 
[10]compound_statement -> { declaration_list statement_list } 
[11]declaration_list -> declaration_type 
[12]declaration_list -> declaration_list declaration_type 
[13]declaration_type -> type_specifier init_declarator_list ; 
[14]init_declarator_list -> init_declarator 
[15]init_declarator_list -> init_declarator_list , init_declarator 
[16]init_declarator -> declarator 
[17]init_declarator -> declarator = initializer 
[18]declarator -> IDENTIFIER 
[19]declarator -> IDENTIFIER [ INT_VAL ] 
[20]initializer -> INT_VAL 
[21]initializer -> CHAR_VAL 
[22]initializer -> FLOAT_VAL 
[23]initializer -> STRING_VAL 
[24]statement_list -> statement 
[25]statement_list -> statement_list statement 
[26]statement -> compound_statement 
[27]statement -> expression_statement 
[28]statement -> iteration_statement 
[29]statement -> jump_statement 
[30]statement -> selection_statement 
[31]expression_statement -> ; 
[32]expression_statement -> expression ; 
[33]expression -> assignment_expression 
[34]assignment_expression -> initializer 
[35]assignment_expression -> IDENTIFIER = assignment_expression 
[36]assignment_expression -> IDENTIFIER [ expression ] = assignment_expression 
[37]assignment_expression -> logical_or_expression 
[38]logical_or_expression -> logical_and_expression 
[39]logical_or_expression -> logical_or_expression || logical_and_expression 
[40]logical_and_expression -> equality_expression 
[41]logical_and_expression -> logical_and_expression && equality_expression 
[42]equality_expression -> relational_expression 
[43]equality_expression -> equality_expression == relational_expression 
[44]equality_expression -> equality_expression != relational_expression 
[45]relational_expression -> additive_expression 
[46]relational_expression -> relational_expression < additive_expression 
[47]relational_expression -> relational_expression > additive_expression 
[48]relational_expression -> relational_expression <= additive_expression 
[49]relational_expression -> relational_expression >= additive_expression 
[50]additive_expression -> multiplicative_expression 
[51]additive_expression -> additive_expression + multiplicative_expression 
[52]additive_expression -> additive_expression - multiplicative_expression 
[53]multiplicative_expression -> unary_expression 
[54]multiplicative_expression -> multiplicative_expression * unary_expression 
[55]multiplicative_expression -> multiplicative_expression / unary_expression 
[56]multiplicative_expression -> multiplicative_expression % unary_expression 
[57]unary_expression -> IDENTIFIER 
[58]unary_expression -> IDENTIFIER [ expression ] 
[59]unary_expression -> initializer 
[60]iteration_statement -> WHILE ( expression ) compound_statement 
[61]iteration_statement -> FOR ( expression_statement expression_statement expression ) compound_statement 
[62]jump_statement -> CONTINUE ; 
[63]jump_statement -> BREAK ; 
[64]jump_statement -> RETURN ; 
[65]jump_statement -> RETURN expression ; 
[66]selection_statement -> IF ( expression ) statement 
[67]selection_statement -> IF ( expression ) statement ELSE statement 
read OK
non_terminals: 33
terminals: 54
start id: 54
END : 53


54 -- program'
--- symbol = program'
--- symbol = program
--- symbol = main_declaration
--- symbol = type_specifier
--- symbol = VOID
--- symbol = CHAR
--- symbol = INT
--- symbol = FLOAT
CHAR, FLOAT, INT, VOID, 
55 -- program
--- symbol = program
--- symbol = main_declaration
--- symbol = type_specifier
--- symbol = VOID
--- symbol = CHAR
--- symbol = INT
--- symbol = FLOAT
CHAR, FLOAT, INT, VOID, 
56 -- main_declaration
--- symbol = main_declaration
--- symbol = type_specifier
--- symbol = VOID
--- symbol = CHAR
--- symbol = INT
--- symbol = FLOAT
CHAR, FLOAT, INT, VOID, 
57 -- type_specifier
--- symbol = type_specifier
--- symbol = VOID
--- symbol = CHAR
--- symbol = INT
--- symbol = FLOAT
CHAR, FLOAT, INT, VOID, 
58 -- compound_statement
--- symbol = compound_statement
--- symbol = {
--- symbol = {
--- symbol = {
--- symbol = {
{, 
59 -- declaration_list
--- symbol = declaration_list
--- symbol = declaration_type
--- symbol = type_specifier
--- symbol = VOID
--- symbol = CHAR
--- symbol = INT
--- symbol = FLOAT
--- symbol = declaration_list
CHAR, FLOAT, INT, VOID, 
60 -- declaration
--- symbol = declaration

61 -- initializer
--- symbol = initializer
--- symbol = INT_VAL
--- symbol = CHAR_VAL
--- symbol = FLOAT_VAL
--- symbol = STRING_VAL
INT_VAL, CHAR_VAL, FLOAT_VAL, STRING_VAL, 
62 -- declaration_type
--- symbol = declaration_type
--- symbol = type_specifier
--- symbol = VOID
--- symbol = CHAR
--- symbol = INT
--- symbol = FLOAT
CHAR, FLOAT, INT, VOID, 
63 -- init_declarator_list
--- symbol = init_declarator_list
--- symbol = init_declarator
--- symbol = declarator
--- symbol = IDENTIFIER
--- symbol = IDENTIFIER
--- symbol = declarator
--- symbol = init_declarator_list
IDENTIFIER, 
64 -- init_declarator
--- symbol = init_declarator
--- symbol = declarator
--- symbol = IDENTIFIER
--- symbol = IDENTIFIER
--- symbol = declarator
IDENTIFIER, 
65 -- declarator
--- symbol = declarator
--- symbol = IDENTIFIER
--- symbol = IDENTIFIER
IDENTIFIER, 
66 -- statement_list
--- symbol = statement_list
--- symbol = statement
--- symbol = compound_statement
--- symbol = {
--- symbol = {
--- symbol = {
--- symbol = {
--- symbol = expression_statement
--- symbol = ;
--- symbol = expression
--- symbol = assignment_expression
--- symbol = initializer
--- symbol = INT_VAL
--- symbol = CHAR_VAL
--- symbol = FLOAT_VAL
--- symbol = STRING_VAL
--- symbol = IDENTIFIER
--- symbol = IDENTIFIER
--- symbol = logical_or_expression
--- symbol = logical_and_expression
--- symbol = equality_expression
--- symbol = relational_expression
--- symbol = additive_expression
--- symbol = multiplicative_expression
--- symbol = unary_expression
--- symbol = IDENTIFIER
--- symbol = IDENTIFIER
--- symbol = initializer
--- symbol = multiplicative_expression
--- symbol = multiplicative_expression
--- symbol = multiplicative_expression
--- symbol = additive_expression
--- symbol = additive_expression
--- symbol = relational_expression
--- symbol = relational_expression
--- symbol = relational_expression
--- symbol = relational_expression
--- symbol = equality_expression
--- symbol = equality_expression
--- symbol = logical_and_expression
--- symbol = logical_or_expression
--- symbol = iteration_statement
--- symbol = WHILE
--- symbol = FOR
--- symbol = jump_statement
--- symbol = CONTINUE
--- symbol = BREAK
--- symbol = RETURN
--- symbol = RETURN
--- symbol = selection_statement
--- symbol = IF
--- symbol = IF
--- symbol = statement_list
BREAK, CONTINUE, FOR, IF, RETURN, WHILE, IDENTIFIER, INT_VAL, CHAR_VAL, FLOAT_VAL, STRING_VAL, {, ;, 
67 -- statement
--- symbol = statement
--- symbol = compound_statement
--- symbol = {
--- symbol = {
--- symbol = {
--- symbol = {
--- symbol = expression_statement
--- symbol = ;
--- symbol = expression
--- symbol = assignment_expression
--- symbol = initializer
--- symbol = INT_VAL
--- symbol = CHAR_VAL
--- symbol = FLOAT_VAL
--- symbol = STRING_VAL
--- symbol = IDENTIFIER
--- symbol = IDENTIFIER
--- symbol = logical_or_expression
--- symbol = logical_and_expression
--- symbol = equality_expression
--- symbol = relational_expression
--- symbol = additive_expression
--- symbol = multiplicative_expression
--- symbol = unary_expression
--- symbol = IDENTIFIER
--- symbol = IDENTIFIER
--- symbol = initializer
--- symbol = multiplicative_expression
--- symbol = multiplicative_expression
--- symbol = multiplicative_expression
--- symbol = additive_expression
--- symbol = additive_expression
--- symbol = relational_expression
--- symbol = relational_expression
--- symbol = relational_expression
--- symbol = relational_expression
--- symbol = equality_expression
--- symbol = equality_expression
--- symbol = logical_and_expression
--- symbol = logical_or_expression
--- symbol = iteration_statement
--- symbol = WHILE
--- symbol = FOR
--- symbol = jump_statement
--- symbol = CONTINUE
--- symbol = BREAK
--- symbol = RETURN
--- symbol = RETURN
--- symbol = selection_statement
--- symbol = IF
--- symbol = IF
BREAK, CONTINUE, FOR, IF, RETURN, WHILE, IDENTIFIER, INT_VAL, CHAR_VAL, FLOAT_VAL, STRING_VAL, {, ;, 
68 -- expression_statement
--- symbol = expression_statement
--- symbol = ;
--- symbol = expression
--- symbol = assignment_expression
--- symbol = initializer
--- symbol = INT_VAL
--- symbol = CHAR_VAL
--- symbol = FLOAT_VAL
--- symbol = STRING_VAL
--- symbol = IDENTIFIER
--- symbol = IDENTIFIER
--- symbol = logical_or_expression
--- symbol = logical_and_expression
--- symbol = equality_expression
--- symbol = relational_expression
--- symbol = additive_expression
--- symbol = multiplicative_expression
--- symbol = unary_expression
--- symbol = IDENTIFIER
--- symbol = IDENTIFIER
--- symbol = initializer
--- symbol = multiplicative_expression
--- symbol = multiplicative_expression
--- symbol = multiplicative_expression
--- symbol = additive_expression
--- symbol = additive_expression
--- symbol = relational_expression
--- symbol = relational_expression
--- symbol = relational_expression
--- symbol = relational_expression
--- symbol = equality_expression
--- symbol = equality_expression
--- symbol = logical_and_expression
--- symbol = logical_or_expression
IDENTIFIER, INT_VAL, CHAR_VAL, FLOAT_VAL, STRING_VAL, ;, 
69 -- expression
--- symbol = expression
--- symbol = assignment_expression
--- symbol = initializer
--- symbol = INT_VAL
--- symbol = CHAR_VAL
--- symbol = FLOAT_VAL
--- symbol = STRING_VAL
--- symbol = IDENTIFIER
--- symbol = IDENTIFIER
--- symbol = logical_or_expression
--- symbol = logical_and_expression
--- symbol = equality_expression
--- symbol = relational_expression
--- symbol = additive_expression
--- symbol = multiplicative_expression
--- symbol = unary_expression
--- symbol = IDENTIFIER
--- symbol = IDENTIFIER
--- symbol = initializer
--- symbol = multiplicative_expression
--- symbol = multiplicative_expression
--- symbol = multiplicative_expression
--- symbol = additive_expression
--- symbol = additive_expression
--- symbol = relational_expression
--- symbol = relational_expression
--- symbol = relational_expression
--- symbol = relational_expression
--- symbol = equality_expression
--- symbol = equality_expression
--- symbol = logical_and_expression
--- symbol = logical_or_expression
IDENTIFIER, INT_VAL, CHAR_VAL, FLOAT_VAL, STRING_VAL, 
70 -- assignment_expression
--- symbol = assignment_expression
--- symbol = initializer
--- symbol = INT_VAL
--- symbol = CHAR_VAL
--- symbol = FLOAT_VAL
--- symbol = STRING_VAL
--- symbol = IDENTIFIER
--- symbol = IDENTIFIER
--- symbol = logical_or_expression
--- symbol = logical_and_expression
--- symbol = equality_expression
--- symbol = relational_expression
--- symbol = additive_expression
--- symbol = multiplicative_expression
--- symbol = unary_expression
--- symbol = IDENTIFIER
--- symbol = IDENTIFIER
--- symbol = initializer
--- symbol = multiplicative_expression
--- symbol = multiplicative_expression
--- symbol = multiplicative_expression
--- symbol = additive_expression
--- symbol = additive_expression
--- symbol = relational_expression
--- symbol = relational_expression
--- symbol = relational_expression
--- symbol = relational_expression
--- symbol = equality_expression
--- symbol = equality_expression
--- symbol = logical_and_expression
--- symbol = logical_or_expression
IDENTIFIER, INT_VAL, CHAR_VAL, FLOAT_VAL, STRING_VAL, 
71 -- condition_expression
--- symbol = condition_expression

72 -- unary_expression
--- symbol = unary_expression
--- symbol = IDENTIFIER
--- symbol = IDENTIFIER
--- symbol = initializer
--- symbol = INT_VAL
--- symbol = CHAR_VAL
--- symbol = FLOAT_VAL
--- symbol = STRING_VAL
IDENTIFIER, INT_VAL, CHAR_VAL, FLOAT_VAL, STRING_VAL, 
73 -- logical_or_expression
--- symbol = logical_or_expression
--- symbol = logical_and_expression
--- symbol = equality_expression
--- symbol = relational_expression
--- symbol = additive_expression
--- symbol = multiplicative_expression
--- symbol = unary_expression
--- symbol = IDENTIFIER
--- symbol = IDENTIFIER
--- symbol = initializer
--- symbol = INT_VAL
--- symbol = CHAR_VAL
--- symbol = FLOAT_VAL
--- symbol = STRING_VAL
--- symbol = multiplicative_expression
--- symbol = multiplicative_expression
--- symbol = multiplicative_expression
--- symbol = additive_expression
--- symbol = additive_expression
--- symbol = relational_expression
--- symbol = relational_expression
--- symbol = relational_expression
--- symbol = relational_expression
--- symbol = equality_expression
--- symbol = equality_expression
--- symbol = logical_and_expression
--- symbol = logical_or_expression
IDENTIFIER, INT_VAL, CHAR_VAL, FLOAT_VAL, STRING_VAL, 
74 -- logical_and_expression
--- symbol = logical_and_expression
--- symbol = equality_expression
--- symbol = relational_expression
--- symbol = additive_expression
--- symbol = multiplicative_expression
--- symbol = unary_expression
--- symbol = IDENTIFIER
--- symbol = IDENTIFIER
--- symbol = initializer
--- symbol = INT_VAL
--- symbol = CHAR_VAL
--- symbol = FLOAT_VAL
--- symbol = STRING_VAL
--- symbol = multiplicative_expression
--- symbol = multiplicative_expression
--- symbol = multiplicative_expression
--- symbol = additive_expression
--- symbol = additive_expression
--- symbol = relational_expression
--- symbol = relational_expression
--- symbol = relational_expression
--- symbol = relational_expression
--- symbol = equality_expression
--- symbol = equality_expression
--- symbol = logical_and_expression
IDENTIFIER, INT_VAL, CHAR_VAL, FLOAT_VAL, STRING_VAL, 
75 -- inclusive_or_expression
--- symbol = inclusive_or_expression

76 -- exclusive_or_expression
--- symbol = exclusive_or_expression

77 -- and_expression
--- symbol = and_expression

78 -- equality_expression
--- symbol = equality_expression
--- symbol = relational_expression
--- symbol = additive_expression
--- symbol = multiplicative_expression
--- symbol = unary_expression
--- symbol = IDENTIFIER
--- symbol = IDENTIFIER
--- symbol = initializer
--- symbol = INT_VAL
--- symbol = CHAR_VAL
--- symbol = FLOAT_VAL
--- symbol = STRING_VAL
--- symbol = multiplicative_expression
--- symbol = multiplicative_expression
--- symbol = multiplicative_expression
--- symbol = additive_expression
--- symbol = additive_expression
--- symbol = relational_expression
--- symbol = relational_expression
--- symbol = relational_expression
--- symbol = relational_expression
--- symbol = equality_expression
--- symbol = equality_expression
IDENTIFIER, INT_VAL, CHAR_VAL, FLOAT_VAL, STRING_VAL, 
79 -- relational_expression
--- symbol = relational_expression
--- symbol = additive_expression
--- symbol = multiplicative_expression
--- symbol = unary_expression
--- symbol = IDENTIFIER
--- symbol = IDENTIFIER
--- symbol = initializer
--- symbol = INT_VAL
--- symbol = CHAR_VAL
--- symbol = FLOAT_VAL
--- symbol = STRING_VAL
--- symbol = multiplicative_expression
--- symbol = multiplicative_expression
--- symbol = multiplicative_expression
--- symbol = additive_expression
--- symbol = additive_expression
--- symbol = relational_expression
--- symbol = relational_expression
--- symbol = relational_expression
--- symbol = relational_expression
IDENTIFIER, INT_VAL, CHAR_VAL, FLOAT_VAL, STRING_VAL, 
80 -- additive_expression
--- symbol = additive_expression
--- symbol = multiplicative_expression
--- symbol = unary_expression
--- symbol = IDENTIFIER
--- symbol = IDENTIFIER
--- symbol = initializer
--- symbol = INT_VAL
--- symbol = CHAR_VAL
--- symbol = FLOAT_VAL
--- symbol = STRING_VAL
--- symbol = multiplicative_expression
--- symbol = multiplicative_expression
--- symbol = multiplicative_expression
--- symbol = additive_expression
--- symbol = additive_expression
IDENTIFIER, INT_VAL, CHAR_VAL, FLOAT_VAL, STRING_VAL, 
81 -- multiplicative_expression
--- symbol = multiplicative_expression
--- symbol = unary_expression
--- symbol = IDENTIFIER
--- symbol = IDENTIFIER
--- symbol = initializer
--- symbol = INT_VAL
--- symbol = CHAR_VAL
--- symbol = FLOAT_VAL
--- symbol = STRING_VAL
--- symbol = multiplicative_expression
--- symbol = multiplicative_expression
--- symbol = multiplicative_expression
IDENTIFIER, INT_VAL, CHAR_VAL, FLOAT_VAL, STRING_VAL, 
82 -- postfix_expression
--- symbol = postfix_expression

83 -- primary_expression
--- symbol = primary_expression

84 -- iteration_statement
--- symbol = iteration_statement
--- symbol = WHILE
--- symbol = FOR
FOR, WHILE, 
85 -- jump_statement
--- symbol = jump_statement
--- symbol = CONTINUE
--- symbol = BREAK
--- symbol = RETURN
--- symbol = RETURN
BREAK, CONTINUE, RETURN, 
86 -- selection_statement
--- symbol = selection_statement
--- symbol = IF
--- symbol = IF
IF, 


0 -- BREAK
--- symbol = BREAK
BREAK, 
1 -- CHAR
--- symbol = CHAR
CHAR, 
2 -- CONTINUE
--- symbol = CONTINUE
CONTINUE, 
3 -- DOUBLE
--- symbol = DOUBLE
DOUBLE, 
4 -- ELSE
--- symbol = ELSE
ELSE, 
5 -- FLOAT
--- symbol = FLOAT
FLOAT, 
6 -- FOR
--- symbol = FOR
FOR, 
7 -- IF
--- symbol = IF
IF, 
8 -- INT
--- symbol = INT
INT, 
9 -- LONG
--- symbol = LONG
LONG, 
10 -- RETURN
--- symbol = RETURN
RETURN, 
11 -- SHORT
--- symbol = SHORT
SHORT, 
12 -- SIGNED
--- symbol = SIGNED
SIGNED, 
13 -- TYPEDEF
--- symbol = TYPEDEF
TYPEDEF, 
14 -- UNSIGNED
--- symbol = UNSIGNED
UNSIGNED, 
15 -- VOID
--- symbol = VOID
VOID, 
16 -- WHILE
--- symbol = WHILE
WHILE, 
17 -- INCLUDE
--- symbol = INCLUDE
INCLUDE, 
18 -- IDENTIFIER
--- symbol = IDENTIFIER
IDENTIFIER, 
19 -- INT_VAL
--- symbol = INT_VAL
INT_VAL, 
20 -- CHAR_VAL
--- symbol = CHAR_VAL
CHAR_VAL, 
21 -- FLOAT_VAL
--- symbol = FLOAT_VAL
FLOAT_VAL, 
22 -- STRING_VAL
--- symbol = STRING_VAL
STRING_VAL, 
23 -- *
--- symbol = *
*, 
24 -- /
--- symbol = /
/, 
25 -- %
--- symbol = %
%, 
26 -- +
--- symbol = +
+, 
27 -- -
--- symbol = -
-, 
28 -- <
--- symbol = <
<, 
29 -- >
--- symbol = >
>, 
30 -- =
--- symbol = =
=, 
31 -- ++
--- symbol = ++
++, 
32 -- --
--- symbol = --
--, 
33 -- <=
--- symbol = <=
<=, 
34 -- >=
--- symbol = >=
>=, 
35 -- !=
--- symbol = !=
!=, 
36 -- &&
--- symbol = &&
&&, 
37 -- ||
--- symbol = ||
||, 
38 -- ==
--- symbol = ==
==, 
39 -- !
--- symbol = !
!, 
40 -- OP_OTHERS
--- symbol = OP_OTHERS
OP_OTHERS, 
41 -- CONST_STR
--- symbol = CONST_STR
CONST_STR, 
42 -- (
--- symbol = (
(, 
43 -- )
--- symbol = )
), 
44 -- [
--- symbol = [
[, 
45 -- ]
--- symbol = ]
], 
46 -- {
--- symbol = {
{, 
47 -- }
--- symbol = }
}, 
48 -- '
--- symbol = '
', 
49 -- "
--- symbol = "
", 
50 -- :
--- symbol = :
:, 
51 -- ;
--- symbol = ;
;, 
52 -- ,
--- symbol = ,
,, 
53 -- #
--- symbol = #
#, 



54 => 55 
 0---1
======================

55 => 56 
 0---1
======================

56 => 57 18 42 43 58 
 0---1
======================

57 => 15 
 0---1
======================

57 => 1 
 0---1
======================

57 => 8 
 0---1
======================

57 => 5 
 0---1
======================

58 => 46 47 
 0---1
======================

58 => 46 59 47 
 0---1
======================

58 => 46 66 47 
 0---1
======================

58 => 46 59 66 47 
 0---1
======================

59 => 62 
 0---1
======================

59 => 59 62 
 0---1
======================

62 => 57 63 51 
 0---1
======================

63 => 64 
 0---1
======================

63 => 63 52 64 
 0---1
======================

64 => 65 
 0---1
======================

64 => 65 30 61 
 0---1
======================

65 => 18 
 0---1
======================

65 => 18 44 19 45 
 0---1
======================

61 => 19 
 0---1
======================

61 => 20 
 0---1
======================

61 => 21 
 0---1
======================

61 => 22 
 0---1
======================

66 => 67 
 0---1
======================

66 => 66 67 
 0---1
======================

67 => 58 
 0---1
======================

67 => 68 
 0---1
======================

67 => 84 
 0---1
======================

67 => 85 
 0---1
======================

67 => 86 
 0---1
======================

68 => 51 
 0---1
======================

68 => 69 51 
 0---1
======================

69 => 70 
 0---1
======================

70 => 61 
 0---1
======================

70 => 18 30 70 
 0---1
======================

70 => 18 44 69 45 30 70 
 0---1
======================

70 => 73 
 0---1
======================

73 => 74 
 0---1
======================

73 => 73 37 74 
 0---1
======================

74 => 78 
 0---1
======================

74 => 74 36 78 
 0---1
======================

78 => 79 
 0---1
======================

78 => 78 38 79 
 0---1
======================

78 => 78 35 79 
 0---1
======================

79 => 80 
 0---1
======================

79 => 79 28 80 
 0---1
======================

79 => 79 29 80 
 0---1
======================

79 => 79 33 80 
 0---1
======================

79 => 79 34 80 
 0---1
======================

80 => 81 
 0---1
======================

80 => 80 26 81 
 0---1
======================

80 => 80 27 81 
 0---1
======================

81 => 72 
 0---1
======================

81 => 81 23 72 
 0---1
======================

81 => 81 24 72 
 0---1
======================

81 => 81 25 72 
 0---1
======================

72 => 18 
 0---1
======================

72 => 18 44 69 45 
 0---1
======================

72 => 61 
 0---1
======================

84 => 16 42 69 43 58 
 0---1
======================

84 => 6 42 68 68 69 43 58 
 0---1
======================

85 => 2 51 
 0---1
======================

85 => 0 51 
 0---1
======================

85 => 10 51 
 0---1
======================

85 => 10 69 51 
 0---1
======================

86 => 7 42 69 43 67 
 0---1
======================

86 => 7 42 69 43 67 4 67 
 0---1
======================
show OK
begin scanner
i
 
m
(
)
 
{


i
 
s
 
=
 
0
,
 
a
[
5
]
;


i
 
i
,
 
j
;


a
[
0
]
 
=
 
0
;


a
[
1
]
 
=
 
1
;


a
[
2
]
 
=
 
2
;


a
[
3
]
 
=
 
3
;


a
[
4
]
 
=
 
4
;


i
 
=
 
0
;


w
 
(
i
 
<
 
5
)
 
{


i
 
=
 
i
 
+
 
1
;


}


}


end scanner
8--18--42--43--46--8--18--30--19--52--18--44--19--45--51--8--18--52--18--51--18--44--19--45--30--19--51--18--44--19--45--30--19--51--18--44--19--45--30--19--51--18--44--19--45--30--19--51--18--44--19--45--30--19--51--18--30--19--51--16--42--18--28--19--43--46--18--30--18--26--19--51--47--47--53--53--
END = 53
type_specifier -> INT 
type_specifier -> INT 
declarator -> IDENTIFIER 
initializer -> INT_VAL 
init_declarator -> declarator = initializer 
init_declarator_list -> init_declarator 
declarator -> IDENTIFIER [ INT_VAL ] 
init_declarator -> declarator 
init_declarator_list -> init_declarator_list , init_declarator 
declaration_type -> type_specifier init_declarator_list ; 
declaration_list -> declaration_type 
type_specifier -> INT 
declarator -> IDENTIFIER 
init_declarator -> declarator 
init_declarator_list -> init_declarator 
declarator -> IDENTIFIER 
init_declarator -> declarator 
init_declarator_list -> init_declarator_list , init_declarator 
declaration_type -> type_specifier init_declarator_list ; 
declaration_list -> declaration_list declaration_type 
initializer -> INT_VAL 
unary_expression -> initializer 
multiplicative_expression -> unary_expression 
additive_expression -> multiplicative_expression 
relational_expression -> additive_expression 
equality_expression -> relational_expression 
logical_and_expression -> equality_expression 
logical_or_expression -> logical_and_expression 
assignment_expression -> logical_or_expression 
expression -> assignment_expression 
initializer -> INT_VAL 
unary_expression -> initializer 
multiplicative_expression -> unary_expression 
additive_expression -> multiplicative_expression 
relational_expression -> additive_expression 
equality_expression -> relational_expression 
logical_and_expression -> equality_expression 
logical_or_expression -> logical_and_expression 
assignment_expression -> logical_or_expression 
assignment_expression -> IDENTIFIER [ expression ] = assignment_expression 
expression -> assignment_expression 
expression_statement -> expression ; 
statement -> expression_statement 
statement_list -> statement 
initializer -> INT_VAL 
unary_expression -> initializer 
multiplicative_expression -> unary_expression 
additive_expression -> multiplicative_expression 
relational_expression -> additive_expression 
equality_expression -> relational_expression 
logical_and_expression -> equality_expression 
logical_or_expression -> logical_and_expression 
assignment_expression -> logical_or_expression 
expression -> assignment_expression 
initializer -> INT_VAL 
unary_expression -> initializer 
multiplicative_expression -> unary_expression 
additive_expression -> multiplicative_expression 
relational_expression -> additive_expression 
equality_expression -> relational_expression 
logical_and_expression -> equality_expression 
logical_or_expression -> logical_and_expression 
assignment_expression -> logical_or_expression 
assignment_expression -> IDENTIFIER [ expression ] = assignment_expression 
expression -> assignment_expression 
expression_statement -> expression ; 
statement -> expression_statement 
statement_list -> statement_list statement 
initializer -> INT_VAL 
unary_expression -> initializer 
multiplicative_expression -> unary_expression 
additive_expression -> multiplicative_expression 
relational_expression -> additive_expression 
equality_expression -> relational_expression 
logical_and_expression -> equality_expression 
logical_or_expression -> logical_and_expression 
assignment_expression -> logical_or_expression 
expression -> assignment_expression 
initializer -> INT_VAL 
unary_expression -> initializer 
multiplicative_expression -> unary_expression 
additive_expression -> multiplicative_expression 
relational_expression -> additive_expression 
equality_expression -> relational_expression 
logical_and_expression -> equality_expression 
logical_or_expression -> logical_and_expression 
assignment_expression -> logical_or_expression 
assignment_expression -> IDENTIFIER [ expression ] = assignment_expression 
expression -> assignment_expression 
expression_statement -> expression ; 
statement -> expression_statement 
statement_list -> statement_list statement 
initializer -> INT_VAL 
unary_expression -> initializer 
multiplicative_expression -> unary_expression 
additive_expression -> multiplicative_expression 
relational_expression -> additive_expression 
equality_expression -> relational_expression 
logical_and_expression -> equality_expression 
logical_or_expression -> logical_and_expression 
assignment_expression -> logical_or_expression 
expression -> assignment_expression 
initializer -> INT_VAL 
unary_expression -> initializer 
multiplicative_expression -> unary_expression 
additive_expression -> multiplicative_expression 
relational_expression -> additive_expression 
equality_expression -> relational_expression 
logical_and_expression -> equality_expression 
logical_or_expression -> logical_and_expression 
assignment_expression -> logical_or_expression 
assignment_expression -> IDENTIFIER [ expression ] = assignment_expression 
expression -> assignment_expression 
expression_statement -> expression ; 
statement -> expression_statement 
statement_list -> statement_list statement 
initializer -> INT_VAL 
unary_expression -> initializer 
multiplicative_expression -> unary_expression 
additive_expression -> multiplicative_expression 
relational_expression -> additive_expression 
equality_expression -> relational_expression 
logical_and_expression -> equality_expression 
logical_or_expression -> logical_and_expression 
assignment_expression -> logical_or_expression 
expression -> assignment_expression 
initializer -> INT_VAL 
unary_expression -> initializer 
multiplicative_expression -> unary_expression 
additive_expression -> multiplicative_expression 
relational_expression -> additive_expression 
equality_expression -> relational_expression 
logical_and_expression -> equality_expression 
logical_or_expression -> logical_and_expression 
assignment_expression -> logical_or_expression 
assignment_expression -> IDENTIFIER [ expression ] = assignment_expression 
expression -> assignment_expression 
expression_statement -> expression ; 
statement -> expression_statement 
statement_list -> statement_list statement 
initializer -> INT_VAL 
unary_expression -> initializer 
multiplicative_expression -> unary_expression 
additive_expression -> multiplicative_expression 
relational_expression -> additive_expression 
equality_expression -> relational_expression 
logical_and_expression -> equality_expression 
logical_or_expression -> logical_and_expression 
assignment_expression -> logical_or_expression 
assignment_expression -> IDENTIFIER = assignment_expression 
expression -> assignment_expression 
expression_statement -> expression ; 
statement -> expression_statement 
statement_list -> statement_list statement 
unary_expression -> IDENTIFIER 
multiplicative_expression -> unary_expression 
additive_expression -> multiplicative_expression 
relational_expression -> additive_expression 
initializer -> INT_VAL 
unary_expression -> initializer 
multiplicative_expression -> unary_expression 
additive_expression -> multiplicative_expression 
relational_expression -> relational_expression < additive_expression 
equality_expression -> relational_expression 
logical_and_expression -> equality_expression 
logical_or_expression -> logical_and_expression 
assignment_expression -> logical_or_expression 
expression -> assignment_expression 
unary_expression -> IDENTIFIER 
multiplicative_expression -> unary_expression 
additive_expression -> multiplicative_expression 
initializer -> INT_VAL 
unary_expression -> initializer 
multiplicative_expression -> unary_expression 
additive_expression -> additive_expression + multiplicative_expression 
relational_expression -> additive_expression 
equality_expression -> relational_expression 
logical_and_expression -> equality_expression 
logical_or_expression -> logical_and_expression 
assignment_expression -> logical_or_expression 
assignment_expression -> IDENTIFIER = assignment_expression 
expression -> assignment_expression 
expression_statement -> expression ; 
statement -> expression_statement 
statement_list -> statement 
compound_statement -> { statement_list } 
iteration_statement -> WHILE ( expression ) compound_statement 
statement -> iteration_statement 
statement_list -> statement_list statement 
compound_statement -> { declaration_list statement_list } 
main_declaration -> type_specifier IDENTIFIER ( ) compound_statement 
program -> main_declaration 
!!!Accpted!!!
